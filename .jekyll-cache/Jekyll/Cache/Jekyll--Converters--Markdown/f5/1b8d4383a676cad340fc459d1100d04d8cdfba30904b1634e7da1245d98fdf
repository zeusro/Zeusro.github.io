I"66<h2 id="前期准备">前期准备</h2>

<ol>
  <li>docker-compose</li>
  <li><a href="https://github.com/almasaeed2010/AdminLTE">AdminLTE</a></li>
  <li>https证书</li>
  <li>一个域名</li>
  <li>源站服务器</li>
  <li></li>
</ol>

<p>只有以 https协议访问网站时,才会有<code class="highlighter-rouge">Accept-Encoding: gzip, deflate, br</code>,所以上述准备缺一不可.</p>

<p>我使用了<a href="https://github.com/almasaeed2010/AdminLTE">AdminLTE</a> 作为页面测试.</p>

<h2 id="服务器配置">服务器配置</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>实例规格： ecs.sn1ne.xlarge
实例规格族： 计算网络增强型
镜像ID： ubuntu_16_0402_64_20G_al...
CPU： 4核
内存： 8 GB
实例类型： I/O优化
操作系统： Ubuntu 16.04 64位
带宽计费方式： 按固定带宽
当前使用带宽： 75Mbps
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="客户端">客户端</h2>

<p>企业电信300M光纤</p>

<h2 id="docker-composeyaml">docker-compose.yaml</h2>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="na">nginx-brotli</span><span class="pi">:</span>
  <span class="na">container_name</span><span class="pi">:</span> <span class="s">nginx-brotli</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s1">'</span><span class="s">fholzer/nginx-brotli:latest'</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">8080:80"</span>
  <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
  <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">/fordocker/nginx.conf:/etc/nginx/nginx.conf:ro'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">/fordocker/AdminLTE-3.0.0-alpha.2/:/usr/share/nginx/html:ro'</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="nginxconf">nginx.conf</h2>

<div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="rouge-code"><pre>
<span class="n">user</span>  <span class="n">nginx</span>;
<span class="n">worker_processes</span>  <span class="m">1</span>;

<span class="n">error_log</span>  /<span class="n">var</span>/<span class="n">log</span>/<span class="n">nginx</span>/<span class="n">error</span>.<span class="n">log</span> <span class="n">warn</span>;
<span class="n">pid</span>        /<span class="n">var</span>/<span class="n">run</span>/<span class="n">nginx</span>.<span class="n">pid</span>;


<span class="n">events</span> {
    <span class="n">worker_connections</span>  <span class="m">1024</span>;
}


<span class="n">http</span> {
    <span class="n">include</span>       /<span class="n">etc</span>/<span class="n">nginx</span>/<span class="n">mime</span>.<span class="n">types</span>;
    <span class="n">default_type</span>  <span class="n">application</span>/<span class="n">octet</span>-<span class="n">stream</span>;

    <span class="n">log_format</span>  <span class="n">main</span>  <span class="s1">'$remote_addr - $remote_user [$time_local] "$request" '</span>
                      <span class="s1">'$status $body_bytes_sent "$http_referer" '</span>
                      <span class="s1">'"$http_user_agent" "$http_x_forwarded_for"'</span>;
    
    <span class="n">access_log</span>  /<span class="n">var</span>/<span class="n">log</span>/<span class="n">nginx</span>/<span class="n">access</span>.<span class="n">log</span>  <span class="n">main</span>;
    <span class="n">root</span>   /<span class="n">etc</span>/<span class="n">nginx</span>/<span class="n">html</span>;

    <span class="n">sendfile</span>        <span class="n">on</span>;
    <span class="c">#tcp_nopush     on;
</span>
    <span class="n">keepalive_timeout</span>  <span class="m">65</span>;

    <span class="n">gzip</span>  <span class="n">on</span>;
    <span class="n">include</span> /<span class="n">etc</span>/<span class="n">nginx</span>/<span class="n">conf</span>.<span class="n">d</span>/*.<span class="n">conf</span>;

    <span class="n">brotli</span> <span class="n">on</span>;
    <span class="n">brotli_static</span> <span class="n">always</span>;
    <span class="n">brotli_comp_level</span> <span class="m">6</span>;
    <span class="n">brotli_types</span> *;

}
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>用到的命令</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nb">ls</span> /usr/share/nginx/html
<span class="nb">cd</span> /fordocker
nano nginx.conf
docker-compose <span class="nb">exec </span>nginx-brotli <span class="nb">ls</span> /usr/share/nginx/html
docker-compose logs nginx-brotli
docker-compose restart
netstat <span class="nt">-nltp</span> | <span class="nb">grep </span>80
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nb">export </span><span class="nv">url</span><span class="o">=</span><span class="s1">''</span>
<span class="nb">echo</span> <span class="nv">$url</span>
<span class="nb">echo</span> <span class="s1">'待测url:'</span><span class="nv">$url</span>
curl <span class="nt">-vo</span> /dev/null <span class="nv">$url</span> <span class="nt">-H</span> <span class="s2">"Accept-Encoding: br"</span> <span class="nt">-w</span> <span class="s2">"cost time: %{time_total}</span><span class="se">\n</span><span class="s2">"</span>
curl <span class="nt">-vo</span> /dev/null <span class="nv">$url</span> <span class="nt">-H</span> <span class="s2">"Accept-Encoding: gzip"</span> <span class="nt">-w</span> <span class="s2">"cost time: %{time_total}</span><span class="se">\n</span><span class="s2">"</span>
curl <span class="nt">-vo</span> /dev/null <span class="nv">$url</span> <span class="nt">-w</span> <span class="s2">"cost time: %{time_total}</span><span class="se">\n</span><span class="s2">"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="对照结果">对照结果</h2>

<p>测试的时候要给 nginx 一个预热的时间,先开 disable chache, 然后刷新十次左右.之后多次测量求平均值</p>

<h3 id="gzip-on">gzip on</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>gzip on
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/img/in-post/nginx-brotli/gzip.png" alt="image" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>1330
1240
1200
829
1580
813
929
996
899
907
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>加载时间平均值:1072.3</li>
  <li>页面总大小1.4MB</li>
</ul>

<h3 id="br-6">br 6</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>    brotli on;
    brotli_static always;
    brotli_comp_level 6;
    brotli_types *;
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/img/in-post/nginx-brotli/br-06.png" alt="image" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>857
1200
855
854
865
1220
854
983
1280
1210
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>加载时间平均值:1017.8</li>
  <li>页面总大小655kb</li>
</ul>

<h3 id="br-7">br 7</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>    brotli on;
    brotli_static always;
    brotli_comp_level 7;
    brotli_types *;
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/img/in-post/nginx-brotli/br-07.png" alt="image" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>854
836
964
868
931
829
877
892
1370
933
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>加载时间平均值:935.4</li>
  <li>页面总大小653kb</li>
</ul>

<h3 id="br-8">br 8</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>    brotli on;
    brotli_static always;
    brotli_comp_level 8;
    brotli_types *;
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/img/in-post/nginx-brotli/br-08.png" alt="image" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>779
906
893
958
831
827
900
830
831
866
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>加载时间平均值:862.1</li>
  <li>页面总大小652kb</li>
</ul>

<h3 id="br-10">br 10</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>    brotli on;
    brotli_static always;
    brotli_comp_level 10;
    brotli_types *;
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/img/in-post/nginx-brotli/br-10.png" alt="image" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>1660
1720
1750
1640
1750
1640
1700
1710
1680
1730
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>加载时间平均值:1698</li>
  <li>页面总大小633kb</li>
</ul>

<h2 id="结论">结论</h2>

<table>
  <thead>
    <tr>
      <th>content-encoding</th>
      <th>加载时间平均值(ms)平均值</th>
      <th>页面总大小</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>gzip</td>
      <td>1072.3</td>
      <td>1.4MB</td>
    </tr>
    <tr>
      <td>br-6</td>
      <td>1017.8</td>
      <td>655kb</td>
    </tr>
    <tr>
      <td>br-7</td>
      <td>935.4</td>
      <td>653kb</td>
    </tr>
    <tr>
      <td>br-8</td>
      <td>862.1</td>
      <td>652kb</td>
    </tr>
    <tr>
      <td>br-10</td>
      <td>1698</td>
      <td>633kb</td>
    </tr>
  </tbody>
</table>

<p>用平均值去计算 br 编码其实不公平的,在实验中,我发现有些文件是干扰变量,用的 gzip 编码.那么再加上这个考量,结合服务器的压缩时间,我觉得 <code class="highlighter-rouge">brotli_comp_level</code> 设置 <strong>6</strong> ~ <strong>8</strong> 会比较合适.</p>

<p>不得不说,谷歌爸爸就是叼</p>

<ol>
  <li><a href="http://www.ruanyifeng.com/blog/2018/02/nginx-docker.html">Nginx 容器教程</a></li>
  <li><a href="https://github.com/fholzer/docker-nginx-brotli">fholzer/docker-nginx-brotli</a></li>
  <li><a href="https://hub.docker.com/r/fholzer/nginx-brotli/tags/">https://hub.docker.com/r/fholzer/nginx-brotli/tags/</a></li>
  <li><a href="https://github.com/google/ngx_brotli">google/ngx_brotli</a></li>
  <li><a href="https://hub.docker.com/_/nginx/">nginx</a></li>
  <li><a href="https://tech.upyun.com/article/257/%E5%90%AF%E7%94%A8%20Brotli%20%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%EF%BC%8C%E5%AF%B9%E6%AF%94%20Gzip%20%E5%8E%8B%E7%BC%A9%20CDN%20%E6%B5%81%E9%87%8F%E5%86%8D%E5%87%8F%E5%B0%91%2020%25.html">启用 Brotli 压缩算法，对比 Gzip 压缩 CDN 流量再减少 20%</a></li>
  <li><a href="https://blog.upyun.com/?p=1769">又拍云 CDN 支持了 Brotli 了！</a></li>
  <li><a href="https://css-tricks.com/brotli-static-compression/">Brotli and Static Compression</a></li>
  <li><a href="https://www.voorhoede.nl/en/blog/static-site-implosion-with-brotli-and-gzip/">Static site implosion with Brotli and Gzip</a></li>
  <li><a href="https://caniuse.com/#feat=brotli">Brotli Accept-Encoding/Content-Encoding</a></li>
  <li><a href="https://www.voorhoede.nl/en/blog/static-site-implosion-with-brotli-and-gzip/">Static site implosion with Brotli and Gzip</a></li>
</ol>
:ET