I"R4<p><code class="highlighter-rouge">kubernetes</code>内部容器通讯都需要通过<code class="highlighter-rouge">api-server</code>进行通讯.外部通过<code class="highlighter-rouge">kubectl</code>访问管理集群,本质上也是访问<code class="highlighter-rouge">api-server</code>,<code class="highlighter-rouge">api-server</code>就是整个集群的指挥中枢.</p>

<p>但是人在江湖漂,哪能不挨刀呢?要怎么防止集群内外瞎搞事的破坏分子呢?<code class="highlighter-rouge">RBAC</code>(Role-based access control )顺势而生.</p>

<p>一句话总结<code class="highlighter-rouge">ServiceAccount</code>,<code class="highlighter-rouge">Role</code>,<code class="highlighter-rouge">RoleBinding</code>,<code class="highlighter-rouge">ClusterRole</code>,<code class="highlighter-rouge">ClusterRoleBinding</code>的关系就是,</p>

<p><strong><code class="highlighter-rouge">ClusterRoleBinding</code>,<code class="highlighter-rouge">RoleBinding</code>是一种任命,认命被授权的对象(users, groups, or service accounts)能够有什么样的权限(Role,ClusterRole)</strong></p>

<h2 id="serviceaccount">ServiceAccount</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{},"name":"flannel","namespace":"kube-system"}}
  creationTimestamp: 2018-07-24T06:44:45Z
  name: flannel
  namespace: kube-system
  resourceVersion: "382"
  selfLink: /api/v1/namespaces/kube-system/serviceaccounts/flannel
  uid: 0d4064e6-8f0d-11e8-b4b4-00163e08cd06
secrets:
- name: flannel-token-f7d4d
</pre></td></tr></tbody></table></code></pre></div></div>

<p>上面说了,<code class="highlighter-rouge">ServiceAccount</code>只是一个虚名,本身没有任何的权限说明.</p>

<h2 id="service-account-token">service-account-token</h2>

<p>service-account-token的API type是<code class="highlighter-rouge">kubernetes.io/service-account-token</code></p>

<p>变动<code class="highlighter-rouge">ServiceAccount</code>时,Token Controller(controller-manager的一部分)
会自动维护<code class="highlighter-rouge">service-account-token</code>,根据实际情况增加/修改/删除,<code class="highlighter-rouge">service-account-token</code>的本质类型是<code class="highlighter-rouge">secret</code>.所以<code class="highlighter-rouge">service-account-token</code>是1对1跟<code class="highlighter-rouge">ServiceAccount</code>随生随死的.</p>

<p>而定义的资源如果指定了<code class="highlighter-rouge">ServiceAccount</code>,<code class="highlighter-rouge">Admission Controllers</code>(api-server的一部分)就会把这个<code class="highlighter-rouge">ServiceAccount</code>相应的<code class="highlighter-rouge">service-account-token</code>以文件的形式挂载到容器内部的<code class="highlighter-rouge">/var/run/secrets/kubernetes.io/serviceaccount</code>目录下.</p>

<p>该目录一般会有3个文件</p>

<ol>
  <li>ca.crt</li>
  <li>namespace</li>
  <li>token</li>
</ol>

<p>参考链接:</p>

<ol>
  <li><a href="https://kubernetes.io/zh/docs/admin/service-accounts-admin/">管理Service Accounts</a></li>
  <li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Configure Service Accounts for Pods</a></li>
</ol>

<h2 id="role">Role</h2>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="na">kind</span><span class="pi">:</span> <span class="s">Role</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">pod-reader</span>
<span class="na">rules</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">apiGroups</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">"</span><span class="pi">]</span> <span class="c1"># "" indicates the core API group</span>
  <span class="na">resources</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">pods"</span><span class="pi">]</span>
  <span class="na">verbs</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">get"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">watch"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">list"</span><span class="pi">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Role 只能用于授予对单个命名空间中的资源访问权限</p>

<p>定义了具体的url</p>

<h2 id="rolebinding">RoleBinding</h2>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1"># This role binding allows "jane" to read pods in the "default" namespace.</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">RoleBinding</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">read-pods</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">subjects</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">User</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">jane</span>
  <span class="na">apiGroup</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io</span>
<span class="na">roleRef</span><span class="pi">:</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s">Role</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">pod-reader</span>
  <span class="na">apiGroup</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>RoleBinding 适用于某个命名空间内授权,RoloBinding 可以将角色中定义的权限授予用户或用户组</p>

<h2 id="clusterrole">ClusterRole</h2>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="c1"># "namespace" omitted since ClusterRoles are not namespaced</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">secret-reader</span>
<span class="na">rules</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">apiGroups</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">"</span><span class="pi">]</span>
  <span class="na">resources</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">secrets"</span><span class="pi">]</span>
  <span class="na">verbs</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">get"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">watch"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">list"</span><span class="pi">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>集群级别的资源控制(例如 node 访问权限)</li>
  <li>非资源型 endpoints(例如 /healthz 访问)</li>
  <li>所有命名空间资源控制(例如 pods)</li>
</ol>

<h2 id="clusterrolebinding">ClusterRoleBinding</h2>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1"># This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRoleBinding</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1beta1</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">read-secrets-global</span>
<span class="na">subjects</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">Group</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">manager</span>
  <span class="na">apiGroup</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io</span>
<span class="na">roleRef</span><span class="pi">:</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">secret-reader</span>
  <span class="na">apiGroup</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRoleBinding</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">prometheus-operator</span>
<span class="na">roleRef</span><span class="pi">:</span>
  <span class="na">apiGroup</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s">ClusterRole</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">prometheus-operator</span>
<span class="na">subjects</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceAccount</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">prometheus-operator</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">monitoring</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>ClusterRoleBinding 适用于集群范围内的授权。</p>

<p>最后用一个表格整理一下</p>

<table>
  <thead>
    <tr>
      <th>资源类型</th>
      <th>说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ServiceAccount</td>
      <td>一个虚名</td>
    </tr>
    <tr>
      <td>service-account-token</td>
      <td>ServiceAccount的身份象征</td>
    </tr>
    <tr>
      <td>Role</td>
      <td>授予对单个命名空间中的资源访问权限</td>
    </tr>
    <tr>
      <td>RoleBinding</td>
      <td>将赋予被授权对象和Role</td>
    </tr>
    <tr>
      <td>ClusterRole</td>
      <td>可视为Role的超集,是从集群角度做的一种授权</td>
    </tr>
    <tr>
      <td>ClusterRoleBinding</td>
      <td>将赋予被授权对象和ClusterRole</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>理解<code class="highlighter-rouge">kubernetes</code>RBAC的最简单办法,就是进入kube-system内部,看看各类集群资源是怎么定义的.</p>

<p>参考链接:</p>

<ol>
  <li><a href="https://mritd.me/2018/01/07/kubernetes-tls-bootstrapping-note/">Kubernetes TLS bootstrapping 那点事</a></li>
  <li><a href="https://mritd.me/2018/03/20/use-rbac-to-control-kubectl-permissions/">使用 RBAC 控制 kubectl 权限</a></li>
  <li><a href="https://mritd.me/2017/07/17/kubernetes-rbac-chinese-translation/">Kubernetes RBAC</a></li>
  <li><a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding">Using RBAC Authorization</a></li>
  <li><a href="https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/">Authenticating with Bootstrap Tokens</a></li>
</ol>
:ET